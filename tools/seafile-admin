#!/usr/bin/env python
# coding: UTF-8

'''This is the helper script to setup/manage your seafile server
'''

import sys

####################
### Requires Python 2.6+
####################
if sys.version_info.major == 3:
    print 'Python 3 not supported yet. Quit now.'
    sys.exit(1)
if sys.version_info.minor < 6:
    print 'Python 2.6 or above is required. Quit now.'
    sys.exit(1)

import os
import time
import re
import sha
import subprocess
import optparse

try:
    import readline
    # Avoid pylint 'unused import' warning
    dummy = readline
except ImportError:
    pass

####################
### Cosntants
####################
server_manual_http = 'https://github.com/haiwen/seafile/wiki'
seafile_google_group = 'https://groups.google.com/forum/?fromgroups#!forum/seafile'
seafile_website = 'http://www.seafile.com'
seahub_download_url = 'https://www.github.com/haiwen/seahub'

####################
### Global variables
####################
cwd = os.getcwd()
SCRIPT_NAME = os.path.basename(sys.argv[0])
conf = {}

####################
### Common helper functions
####################
USAGE = '''\
Usage: %s <operation>

    setup       guide you to setup the seafile server

    start       start the seafile server
      --no-web  don't start seahub, so that you can start it with your
                front end web server, like nginx.
                See https://github.com/haiwen/seafile/wiki/Deploy-seahub-in-a-production-environment

    stop        stop the seafile server
''' % SCRIPT_NAME

def usage():
    print USAGE

def highlight(content):
    '''Add ANSI color to content to get it highlighted on terminal'''
    return '\x1b[33m%s\x1b[m' % content

def ask_question(desc, key=None, note=None, default=None,
                 validate=None, yes_or_no=False, invalidate_msg=None):
    '''Ask a question, return the answer. The optional validate param is a
    function used to validate the answer. If yes_or_no is True, then a boolean
    value would be returned.

    '''
    assert key or yes_or_no
    desc = highlight(desc)
    if note:
        desc += '  (%s)' % note
    if default:
        desc += '\n' + ('[default %s ]' % default)
    else:
        if yes_or_no:
            desc += '\n[yes or no]'
        else:
            desc += '\n' + ('[%s ]' % key)

    desc += '  '
    while True:
        answer = raw_input(desc)
        if not answer:
            if default:
                print ''
                return default
            else:
                continue

        answer = answer.strip()

        if yes_or_no:
            if answer != 'yes' and answer != 'no':
                print '\nPlease answer yes or no\n'
                continue
            else:
                return answer == 'yes'
        else:
            if validate and not validate(answer):
                if invalidate_msg:
                    print '\n%s\n' % invalidate_msg
                else:
                    print '\n"%s" is not a valid %s\n' % (answer, key)
                continue

        print ''
        return answer

def run(argv, cwd=None, env=None):
    '''Run a program and wait it to finish, and return its exit code. The
    standard output of this program is supressed.

    '''
    with open(os.devnull, 'w') as devnull:
        proc = subprocess.Popen(argv, cwd=cwd, stdout=devnull, env=env)
        return proc.wait()

def is_running(process):
    '''Detect if there is a process with the given name running'''
    argv = [
        'pgrep', '-f', process
    ]

    return run(argv) == 0

def pkill(process):
    '''Kill the program with the given name'''
    argv = [
        'pkill', '-f', process
    ]

    run(argv)

def kill(pid):
    '''Kill the program with the given pid'''
    argv = [
        'kill', pid
    ]

    run(argv)

def check_seafile_install(silent=False):
    '''Check if seafile has been correctly built and installed in this
    system

    '''
    dirs = os.environ['PATH'].split(':')
    def exist_in_path(prog):
        '''Test whether prog exists in system path'''
        for d in dirs:
            if d == '':
                continue
            path = os.path.join(d, prog)
            if os.path.exists(path):
                return True

        return False

    def check_prog(name):
        if not exist_in_path(name):
            print '%s not found in PATH. Have you built and installed seafile server?' % name
            sys.exit(1)

    progs = [
        'ccnet-init',
        'seaf-server-init',
        'seaf-server',
        'ccnet-server',
        'seafile-controller',
        'httpserver'
    ]

    if not silent:
        print 'check seafile installation ...',

    for p in progs:
        check_prog(p)

    if not silent:
        print 'done\n'

def get_seahub_env():
    '''And PYTHONPATH and CCNET_CONF_DIR to env, which is needed by seahub'''
    seahub_dir = os.path.join(cwd, 'seahub')
    seahub_thirdpart = os.path.join(seahub_dir, 'thirdpart')

    env = dict(os.environ)
    pypath = env.get('PYTHONPATH', '')

    pathlist = [ p for p in pypath.split(':') if p != '' ]
    pathlist.append(seahub_thirdpart)
    newpypath = ':'.join(pathlist)
    env['PYTHONPATH'] = newpypath
    env['CCNET_CONF_DIR'] = conf['ccnet_conf_dir']
    return env


####################
### <setup> command
####################
def welcome():
    '''Show welcome message when run the <setup> command'''
    welcome_msg = '''\
-----------------------------------------------------------------
This script will guide you to config and setup your seafile server.
Make sure you have read seafile server manual at

        %s

Press [ENTER] to continue
-----------------------------------------------------------------
''' % server_manual_http
    print welcome_msg
    raw_input()

def get_server_name():
    def validate(name):
        r = re.compile(r'^[\w]{3,15}$')
        return bool(r.match(name))
    question = 'What is the name of the server?'
    key = 'server name'
    note = '3 - 15 letters or digits'
    conf['server_name'] = ask_question(question,
                                       key=key,
                                       note=note,
                                       validate=validate)

def get_server_ip_or_domain():
    def validate(s):
        r = r'^[^.].+\..+[^.]$'
        return bool(re.match(r, s))
    question = 'What is the ip of the server?'
    key = 'ip or domain'
    note = 'For example: www.mycompany.com, 192.168.1.101'
    conf['ip_or_domain'] = ask_question(question,
                                        key=key,
                                        note=note,
                                        validate=validate)
def get_ccnet_conf_dir():
    ccnet_conf_dir = os.path.join(cwd, 'ccnet')
    ccnet_conf = os.path.join(ccnet_conf_dir, 'ccnet.conf')

    if os.path.exists(ccnet_conf_dir):
        if os.path.exists(ccnet_conf):
            question = 'It seems there already exists ccnet config files in %s, Do you want to use them?' % ccnet_conf_dir
            yesno = ask_question(question, yes_or_no=True)
            if not yesno:
                print highlight('\nRemove the directory %s first, and run the script again.\n' % ccnet_conf_dir)
                sys.exit(1)
            else:
                conf['ccnet_conf_exists'] = True
        else:
            print 'Please remove the directory %s first, and run the script again' % ccnet_conf_dir
    else:
        conf['ccnet_conf_exists'] = False

    conf['ccnet_conf_dir'] = ccnet_conf_dir

def get_ccnet_port():
    def validate(s):
        try:
            port = int(s)
        except ValueError:
            return False

        return port > 0 and port < 65536

    question = 'Which port do you want to use for the ccnet server?'
    key = 'ccnet server port'
    default = '10001'
    conf['ccnet_port'] = ask_question(question,
                                      key=key,
                                      default=default,
                                      validate=validate)

def get_seafile_port():
    def validate(s):
        try:
            port = int(s)
        except ValueError:
            return False

        return port > 0 and port < 65536

    question = 'Which port do you want to use for the seafile server?'
    key = 'seafile server port'
    default = '12001'
    conf['seafile_port'] = ask_question(question,
                                        key=key,
                                        default=default,
                                        validate=validate)
def get_seafile_data_dir():
    seafile_data_dir = os.path.join(cwd, 'seafile-data')
    seafile_conf = os.path.join(seafile_data_dir, 'seafile.conf')

    if os.path.exists(seafile_data_dir):
        if os.path.exists(seafile_conf):
            question = 'It seems there already exists seafile data in %s, Do you want to use them?' % seafile_data_dir
            yesno = ask_question(question, yes_or_no=True)
            if not yesno:
                print highlight('\nRemove the directory %s first, and run the script again.\n' % seafile_data_dir)
                sys.exit(1)
            else:
                conf['seafile_data_exists'] = True
        else:
            print 'Please remove the directory %s first, and run the script again' % seafile_data_dir
    else:
        conf['seafile_data_exists'] = False

    conf['seafile_data_dir'] = seafile_data_dir

def create_gunicorn_conf():
    runtime_dir = os.path.join(cwd, 'runtime')
    confpath = os.path.join(runtime_dir, 'seahub.conf')

    if os.path.exists(confpath):
        return

    os.mkdir(runtime_dir)
    content = '''\
import os
daemon = True
workers = 3

# Logging
runtime_dir = os.path.dirname(__file__)
pidfile = os.path.join(runtime_dir, 'seahub.pid')
errorlog = os.path.join(runtime_dir, 'error.log')
accesslog = os.path.join(runtime_dir, 'access.log')
# for file upload, we need a longer timeout value (default is only 30s, too short)
timeout = 1200
'''
    try:
        with open(confpath, 'w') as fp:
            fp.write(content)
    except:
        print 'Failed to write seahub config'
        sys.exit(1)

def get_admin_email_password():
    print 'Now let\'s create the admin account of seahub\n'
    def validate(email):
        # whitespace is not allowed
        if re.match(r'[\s]', email):
            return False
        # must be a valid email address
        if not re.match(r'^.+@.*\..+$', email):
            return False
        return True

    key = 'admin email'
    question = 'What is the ' + highlight('email') + ' for the admin account'
    admin_email = ask_question(question,
                               key=key,
                               validate=validate)

    key = 'admin password'
    question = 'What is the ' + highlight('password') + ' for the admin account'
    admin_password = ask_question(question,
                                  key=key)

    key = 'admin password again'
    question = 'Enter the password again'
    invalidate_msg = 'Password mismatch'
    def validate_again(password):
        return password == admin_password
    ask_question(question,
                 key=key,
                 validate=validate_again,
                 invalidate_msg=invalidate_msg)

    print '\nThis is your admin account email/password:\n'
    print '------------------------------------------'

    print 'admin email:         %s' % admin_email
    print 'admin password:      %s' % admin_password

    print '------------------------------------------'
    print '\nPress ENTER if the config is right, or anything else to re-config admin account ',

    if raw_input() != '':
        print ''
        get_admin_email_password()
    else:
        sha1 = sha.sha(admin_password)
        conf['admin_email'] = admin_email
        conf['admin_password'] = sha1.hexdigest()
        print ''

def create_seahub_admin():
    get_admin_email_password()

    import sqlite3

    peermgr_dir = os.path.join(conf['ccnet_conf_dir'], 'PeerMgr')
    usermgr_db = os.path.join(peermgr_dir, 'usermgr.db')

    if not os.path.exists(peermgr_dir):
        os.mkdir(peermgr_dir)
    conn = sqlite3.connect(usermgr_db)
    c = conn.cursor()

    sql = 'CREATE TABLE IF NOT EXISTS EmailUser (id INTEGER NOT NULL PRIMARY KEY, email TEXT, passwd TEXT, is_staff bool NOT NULL, is_active bool NOT NULL, ctime INTEGER)'
    c.execute(sql)
    sql = r'INSERT INTO EmailUser(email, passwd, is_staff, is_active, ctime) VALUES ("%s", "%s", 1, 1, 0)' \
          % (conf['admin_email'], conf['admin_password'])
    c.execute(sql)
    conn.commit()

def set_httpserver_root():
    local_settings_py = os.path.join(cwd, 'seahub', 'local_settings.py')
    if 'ip_or_domain' not in conf:
        get_server_ip_or_domain()

    conf['ip_or_domain'] = conf['ip_or_domain'].lstrip('http://')
    content = "HTTP_SERVER_ROOT = 'http://%s:8082'" % conf['ip_or_domain']
    with open(local_settings_py, 'w') as fp:
        fp.write(content)

def init_seahub():
    seahub_dir = os.path.join(cwd, 'seahub')

    argv = ['python', 'manage.py', 'syncdb']
    # Set proper PYTHONPATH before run django syncdb command
    env = get_seahub_env()

    print ''
    print 'Now initializing seahub database, please wait...',
    sys.stdout.flush()

    if run(argv, cwd=seahub_dir, env=env) != 0:
        print 'Seahub syncdb failed'
        sys.exit(1)

    print 'done\n'

    # set http_sever_root
    set_httpserver_root()
    create_seahub_admin()
    create_gunicorn_conf()

def check_django_version():
    '''Requires django 1.3'''
    import django
    if django.VERSION[1] != 3:
        print 'Django 1.3 is required'
        sys.exit(0)
    del django

def check_python_dependencies(silent=False):
    '''Ensure all python libraries we need are installed'''
    def check_module(import_name, package_name):
        if not silent:
            print '    checking %s' % package_name,
        try:
            __import__(import_name)
        except ImportError:
            print highlight('\n\n    %s not found. Please install it first\n' % package_name)
            sys.exit(1)
        else:
            if not silent:
                print '... done'

    if not silent:
        print 'check python modules ...'
    check_module('pkg_resources', 'setuptools')
    check_module('simplejson', 'simplejson')
    check_module('sqlite3', 'sqlite3')
    check_module('PIL', 'python imaging library(PIL)')
    check_module('django', 'django 1.3')
    check_module('djblets', 'djblets')
    check_django_version()
    check_module('gunicorn', 'gunicorn')
    if not silent:
        print ''

def config_ccnet_seafile():
    get_ccnet_conf_dir()
    if not conf['ccnet_conf_exists']:
        get_server_name()
        get_server_ip_or_domain()
        get_ccnet_port()

    get_seafile_data_dir()
    if not conf['seafile_data_exists']:
        get_seafile_port()

    print '\nThis is your configuration\n'
    print '------------------------------------------'

    if conf['ccnet_conf_exists']:
        print 'ccnet config:        use existing config in %s' % highlight(conf['ccnet_conf_dir'])
    else:
        print 'ccnet conf dir:      %s' % highlight(conf['ccnet_conf_dir'])
        print 'server name:         %s' % highlight(conf['server_name'])
        print 'server host:         %s' % highlight(conf['ip_or_domain'])
        print 'ccnet port:          %s' % highlight(conf['ccnet_port'])

    if conf['seafile_data_exists']:
        print 'seafile:             use existing config in %s' % highlight(conf['seafile_data_dir'])
    else:
        print 'seafile data dir:    %s' % highlight(conf['seafile_data_dir'])
        print 'seafile port:        %s' % highlight(conf['seafile_port'])

    print '------------------------------------------'
    print '\nPress ENTER if the config is right, or anything else to re-config ',

    if raw_input() != '':
        print ''
        config_ccnet_seafile()
    else:
        return

def check_seahub():
    seahub_dir = os.path.join(cwd, 'seahub')
    if not os.path.exists(seahub_dir):
        print highlight('\nThe "seahub" folder not found in the current directory')
        print 'Please run %s in the right directory' % SCRIPT_NAME
        print 'If you have not downloaded seahub, download it from:\n'
        print '\t%s\n' % seahub_download_url
        print 'Then put it under this directory, and run the script again\n'
        sys.exit(1)

def init_ccnet_seafile():
    if not conf['ccnet_conf_exists']:
        print 'Generating ccnet configuration...',
        argv = [
            'ccnet-init',
            '-c', conf['ccnet_conf_dir'],
            '--name', conf['server_name'],
            '--port', conf['ccnet_port'],
            '--host', conf['ip_or_domain'],
        ]

        if run(argv) != 0:
            print 'failed to init ccnet configuration'
            sys.exit(1)

        print 'done'

    if not conf['seafile_data_exists']:
        print 'Generating seafile configuration...',
        argv = [
            'seaf-server-init',
            '--seafile-dir', conf['seafile_data_dir'],
        ]

        if run(argv) != 0:
            print 'failed to init seafile configuration'
            sys.exit(1)

        print 'done'

####################
### <start> command
####################
def start_controller():
    argv = [
        'seafile-controller',
        '-c', os.path.join(cwd, 'ccnet'),
        '-d', os.path.join(cwd, 'seafile-data'),
    ]

    print 'Starting seafile-server...'
    if run(argv) != 0:
        print 'Failed to start seafile'
        sys.exit(1)

    # check again after 3 seconds
    time.sleep(3)

    if not is_running('seafile-controller'):
        print 'Failed to start seafile'
        sys.exit(1)

def start_httpserver():
    argv = [
        'httpserver',
        '-c', conf['ccnet_conf_dir'],
        '-d', conf['seafile_data_dir'],
    ]

    print 'Starting seafile httpserver...'
    if run(argv) != 0:
        print 'Failed to start seafile httpserver'
        sys.exit(1)

    # check again after 2 seconds
    time.sleep(2)

    if not is_running('httpserver'):
        print 'Failed to start httpserver'
        sys.exit(1)

def start_seahub():
    argv = [
        'gunicorn_django',
        '-c', conf['seahub_conf'],
        '-b', '0.0.0.0:%s' % conf['seahub_port'],
    ]

    print 'Starting seahub...'
    env = get_seahub_env()
    if run(argv, cwd=conf['seahub_dir'], env=env) != 0:
        print 'Failed to start seahub'
        sys.exit(1)

    print 'Seahub running on port %s' % conf['seahub_port']

def check_config():
    ccnet_conf_dir = os.path.join(cwd, 'ccnet')
    if not os.path.exists(ccnet_conf_dir):
        print 'No directory named "ccnet" found under current directory.'
        print 'Have you run "seafile-admin setup"?'
        print ''
        sys.exit(1)

    seafile_data_dir = os.path.join(cwd, 'seafile-data')
    if not os.path.exists(seafile_data_dir):
        print 'No directory named "seafile-data" found under current directory.'
        print 'Have you run "seafile-admin setup"?'
        sys.exit(1)

    seahub_dir = os.path.join(cwd, 'seahub')
    if not os.path.exists(seafile_data_dir):
        print 'No directory named "seahub" found under current directory.'
        sys.exit(1)

    seahub_conf = os.path.join(cwd, 'runtime', 'seahub.conf')
    if not os.path.exists(seafile_data_dir):
        print 'seahub.conf not found.'
        sys.exit(1)

    conf['ccnet_conf_dir'] = ccnet_conf_dir
    conf['seafile_data_dir'] = seafile_data_dir
    conf['seahub_dir'] = seahub_dir
    conf['seahub_conf'] = seahub_conf
    conf['seahub_port'] = 8000

def setup_seafile():
    welcome()
    check_python_dependencies()
    config_ccnet_seafile()
    init_ccnet_seafile()
    init_seahub()

    print
    print '-----------------------------------------------------------------'
    print 'Your seafile server configuration has been finished successfully.'
    print '-----------------------------------------------------------------'
    print
    print 'To start/stop seafile server:\n'
    print highlight('         $ cd %s' % cwd)
    print highlight('         $ %s { start | stop }\n' % SCRIPT_NAME)
    print 'If you have any problem, refer to\n'
    print '         %s\n' % server_manual_http
    print '         %s\n' % seafile_google_group
    print '         %s\n' % seafile_website
    print 'for more information.'
    print

def parse_start_options():
    parser = optparse.OptionParser()
    parser.add_option('--no-web',
                      dest='start_web',
                      help='''don't start web(This indicates you want to start it yourself''',
                      action='store_false')
    parser.set_usage('Usage: %s start [options]' % SCRIPT_NAME)

    options, remain = parser.parse_args(sys.argv[2:])
    if remain:
        usage()
        sys.exit(1)

    return options

def start_seafile():
    '''start ccnet/seafile/seahub/httpserver'''
    options = parse_start_options()

    check_python_dependencies(silent=True)
    if is_running('seafile-controller'):
        print highlight('NOTE: Seafile is already running')
        sys.exit(1)

    check_config()
    start_controller()
    start_httpserver()

    if options.start_web:
        start_seahub()

    print 'Done\n'

def stop_seafile():
    print 'Stopping seafile server'
    pkill('seafile-controller')
    pkill('httpserver')
    try:
        with open(os.path.join(cwd, 'runtime', 'seahub.pid'), 'r') as fp:
            pid = fp.read().strip('\n').strip()
            kill(pid)
    except:
        pass

    print 'done\n'

def main():
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    if sys.argv[1] == 'setup':
        check_seahub()
        check_seafile_install()
        setup_seafile()
    elif sys.argv[1] == 'start':
        check_seahub()
        check_seafile_install(silent=True)
        start_seafile()
    elif sys.argv[1] == 'stop':
        check_seafile_install(silent=True)
        stop_seafile()
    else:
        usage()
        sys.exit(1)

if __name__ == '__main__':
    main()
